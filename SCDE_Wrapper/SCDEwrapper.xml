<tool id="SCDEwrapper" name="SCDEwrapper" version="0.01">
<description>Estimates differential gene expression for  single-cell RNA-seq measurements</description>

<command interpreter="python">

        SCDEwrapper.py --script_path "$runMe" --interpreter "Rscript" 
            --tool_name "SCDEwrapper" --input_tab "$input1"   --output_dir "./" --output_tab "$tab_file" 
</command>
<inputs>
<param name="input1"  type="data" format="tabular" label="Select a suitable input file from your history"/> 
<param name="job_name" type="text" label="Supply a name for the outputs to remind you what they contain" value="SCDEwrapper"/> 

</inputs>
<outputs>
 <data format="tabular" name="tab_file" label="${job_name}"/>

</outputs>
<configfiles>
<configfile name="runMe">
cat("SCDE Started......\n")
cat("\n")

library("scde")
require(methods)

ourargs = commandArgs(TRUE)
inf = ourargs[1]
outf = ourargs[2]
cat("input file name:");inf
cat("output file name:");outf
cat("\n")

inp_data &lt;- read.table(inf, sep="\t", comment="", as.is=T)
head(inp_data)

inp_data_groups &lt;- sapply(inp_data[1, -1], strsplit, ":")
head(inp_data_groups);#mode(inp_data_groups)

id = 0
stk = ""
for (i in 1:length(inp_data_groups)) {
  g &lt;- make.names(inp_data_groups[[i]][2])
  if (g!=stk){ id = 1}
  names(inp_data_groups)[i] &lt;- paste(g, id, sep="_")
  inp_data_groups[[i]] &lt;- inp_data_groups[[i]][-1]
  stk = g
  id = id + 1
}

header_d &lt;- as.data.frame(inp_data_groups);header_d
inp_data_factor &lt;- unname(unlist(header_d[1,]));inp_data_factor

rownames(inp_data) &lt;- inp_data[,1]
inp_data &lt;- inp_data[-(1:2), -1]
colnames(inp_data) &lt;- names(inp_data_groups)
for(i in colnames(inp_data))
  inp_data[, i] &lt;- as.numeric(inp_data[,i])

head(inp_data)

o.ifm &lt;- scde.error.models(counts=inp_data, groups=inp_data_factor, n.cores=4, threshold.segmentation=T, save.crossfit.plots=F, save.model.plots=F, verbose=1)
head(o.ifm)

o.ifm &lt;- o.ifm[o.ifm\$corr.a &gt; 0, ]

o.prior &lt;- scde.expression.prior(
  models=o.ifm, counts=inp_data,
  length.out=400, show.plot=F)

ediff &lt;- scde.expression.difference(
  o.ifm, inp_data,
  o.prior, groups=inp_data_factor,
  n.randomizations=100, n.cores=4, verbose=1)

head(ediff[order(ediff\$Z,decreasing=T),])

write.table(ediff[order(abs(ediff\$Z),decreasing=T),],outf,row.names=T,col.names=T,sep="\t",quote=F)

cat("....All Done. End of Script\n")
</configfile>
</configfiles>


        <tests>
        <test>
        <param name="input1" value="SCDEwrapper_test1_input.xls" ftype="tabular"/>
        <param name="job_name" value="test1"/>
        <param name="runMe" value="$runMe"/>
        <output name="tab_file" file="SCDEwrapper_test1_output.xls" ftype="tabular"/>
        </test>
        </tests>
        

<help>


[Attribution] 
This tool wraps the SCDE Bioconductor package so all calculations and plots are controlled by that code. See SCDE for all documentation and appropriate attribution. Recommended reference is Kharchenko PV, Silberstein L, Scadden DT, Nature Methods, doi:
http://pklab.med.harvard.edu/scde/index.html

**Script**
Pressing execute will run the following code over your input file and generate some outputs in your history::


 cat("SCDE Started......\n")
 cat("\n")
 
 library("scde")
 require(methods)
 
 ourargs = commandArgs(TRUE)
 inf = ourargs[1]
 outf = ourargs[2]
 cat("input file name:");inf
 cat("output file name:");outf
 cat("\n")
 
 inp_data &lt;- read.table(inf, sep="\t", comment="", as.is=T)
 head(inp_data)
 
 inp_data_groups &lt;- sapply(inp_data[1, -1], strsplit, ":")
 head(inp_data_groups);#mode(inp_data_groups)
 
 id = 0
 stk = ""
 for (i in 1:length(inp_data_groups)) {
   g &lt;- make.names(inp_data_groups[[i]][2])
   if (g!=stk){ id = 1}
   names(inp_data_groups)[i] &lt;- paste(g, id, sep="_")
   inp_data_groups[[i]] &lt;- inp_data_groups[[i]][-1]
   stk = g
   id = id + 1
 }
 
 header_d &lt;- as.data.frame(inp_data_groups);header_d
 inp_data_factor &lt;- unname(unlist(header_d[1,]));inp_data_factor
 
 rownames(inp_data) &lt;- inp_data[,1]
 inp_data &lt;- inp_data[-(1:2), -1]
 colnames(inp_data) &lt;- names(inp_data_groups)
 for(i in colnames(inp_data))
   inp_data[, i] &lt;- as.numeric(inp_data[,i])
 
 head(inp_data)
 
 o.ifm &lt;- scde.error.models(counts=inp_data, groups=inp_data_factor, n.cores=4, threshold.segmentation=T, save.crossfit.plots=F, save.model.plots=F, verbose=1)
 head(o.ifm)
 
 o.ifm &lt;- o.ifm[o.ifm\$corr.a &gt; 0, ]
 
 o.prior &lt;- scde.expression.prior(
   models=o.ifm, counts=inp_data,
   length.out=400, show.plot=F)
 
 ediff &lt;- scde.expression.difference(
   o.ifm, inp_data,
   o.prior, groups=inp_data_factor,
   n.randomizations=100, n.cores=4, verbose=1)
 
 head(ediff[order(ediff\$Z,decreasing=T),])
 
 write.table(ediff[order(abs(ediff\$Z),decreasing=T),],outf,row.names=T,col.names=T,sep="\t",quote=F)
 
 cat("....All Done. End of Script\n")

**Attribution**
This Galaxy tool was created by mika.yoshimura@riken.jp at 30/03/2015 17:19:07
using the Galaxy Tool Factory.

See https://bitbucket.org/fubar/galaxytoolfactory for details of that project
Please cite: Creating re-usable tools from scripts: The Galaxy Tool Factory. Ross Lazarus; Antony Kaspi; Mark Ziemann; The Galaxy Team. 
Bioinformatics 2012; doi: 10.1093/bioinformatics/bts573


</help>
<citations>
    
    <citation type="doi">10.1093/bioinformatics/bts573</citation>
</citations>
</tool>
